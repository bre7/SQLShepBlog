z = (100%/%(5*3))
x + y -z
(6*5*4*3*2*1) / (2*1)
(3*2*1) * (2)
x = (100%/%2)
y = (100%/%3)
z = (100%/%(2*3))
x + y -z
(5*4*3*2*1) / (3*2*1)
(4*3*2*1) / (2)
(5*4*3*2*1) / 2
(4*3*2*1) / 2
(5*4*3*2*1) / 2
(4*3*2*1)
(4*3*2*1)
(4*3*2*1)
(4*3*2*1) * 2
(5*4*3*2*1) - (4*3*2*1) * 2
(4*3*2*1) - (3*2*1) *  2
x = (100%/%3)
y = (100%/%10)
z = (100%/%(3*10))
x + y -z
2^4
4.9*3
4.9*3^2
4.9*(3^2)
2*7*5
(7+5)*(7-5)
7*4
7*7/13
18/3
a = (10,2,38,23,38,23,21,5)
a = (10,2,38,23,38,23,21,5)
a <= (10,2,38,23,38,23,21,5)
a <= c(10,2,38,23,38,23,21,5)
a <- c(10,2,38,23,38,23,21,5)
var(a)
b = c(-5,3,12,190,-10)
var(b)
std(b)
stdev(b)
sd(b)
1- (3/6 * 1/2)
(1/2)**3
9*8*7*6*5*4*3 / 2*1
9*8*7*6*5*4*3
9**6
9**7
9*10**6
9999999 - 1000000
9*10**6
10/9*10**6
9*10**6
options(scipen=999)
10/9*10**6
9*10**6
10/(9*10**6)
(9*10**6)
(9*10**6)/10
(3/10) * (2/9) * (1/8)
10*9*8
1/ 10*9*8
(10*9*8*7*6)
(10*9*8*7*6) / (5*4*3*2*1)
16*15*14*13*12*11*10*9*8*7*6*5*4*3*2*1
options(scipen=999)
16*15*14*13*12*11*10*9*8*7*6*5*4*3*2*1
16*15*14
10*9*8*7*6*5*4*3*2*1
4*3*2*1
13*12*11*10*9*8*7*6*5*4*3*2*1
16*15*14*13*12*11*10*9*8*7*6*5*4*3*2*1 / 13*12*11*10*9*8*7*6*5*4*3*2*1
(16*15*14*13*12*11*10*9*8*7*6*5*4*3*2*1) / (13*12*11*10*9*8*7*6*5*4*3*2*1)
10*9*8*7*6*5*4*3*2*1
8*7*6*5*4*3*2*1
16*15*14
(16*15*14*13*12*11*10*9*8*7*6*5*4*3*2*1)
(16*15*14*13*12*11*10*9*8*7*6*5*4*3*2*1) / 3*(13*12*11*10*9*8*7*6*5*4*3*2*1)
(16*15*14*13*12*11*10*9*8*7*6*5*4*3*2*1) / (13*12*11*10*9*8*7*6*5*4*3*2*1)
(13*12*11*10*9*8*7*6*5*4*3*2*1)
(16*15*14*13*12*11*10*9*8*7*6*5*4*3*2*1) / (3*2*1)*(13*12*11*10*9*8*7*6*5*4*3*2*1)
(16*15*14*13*12*11*10*9*8*7*6*5*4*3*2*1) / ((3*2*1)*(13*12*11*10*9*8*7*6*5*4*3*2*1))
13*12*11*10*9*8*7*6*5*4*3*2*1
20922789888000/(6*6227020800)
(7*6*5*4*3*2*1) / ((3*2*1)(4*3*2*1))
(7*6*5*4*3*2*1) / ((3*2*1)*(4*3*2*1))
(7*6*5) / ((3*2*1))
10*9*8
26*25*24*23
10*9*8*7*6
(10*9*8*7*6) / (5*4*3*2*1)
(9*8*7*6) / (5*4*3*2*1)
(9*8*7*6) / (4*3*2*1)
26*25*24*23
26! / 4!(26-4)!
(26-4)
(26*25*24*23) / ((4*3*2*1)*(22*21*20*19*18*17*16*15*14*13*12*11*10*9*8*7*6*5*4*3*2*1))
(26*25*24*23*22*21*20*19*18*17*16*15*14*13*12*11*10*9*8*7*6*5*4*3*2*1) / ((4*3*2*1)*(22*21*20*19*18*17*16*15*14*13*12*11*10*9*8*7*6*5*4*3*2*1))
(26*25*24*23*22*21*20*19*18*17*16*15*14*13*12*11*10*9*8*7*6*5*4*3*2*1)
26*25*24*23*22
26*25*24*23
26*26*10*10*10
8*7*6*5*4*3*2*1
6*5*4*3*2*1
4*3*2*1
2*1
5*4*3*2*1
10*9*8*7*6*5*4*3*2*1
14*13*12*11*10*9*8*7*6*5*4*3*2*1
14*13*12*11*10*9*8*7*6*5*4*3*2*1 / (1*2*3)
(14*13*12*11*10*9*8*7*6*5*4*3*2*1) / (1*2*3)
(14*13*12*11*10*9*8*7*6*5*4*3*2*1) / (14*13*12)
(14*13*12*) / (6)
(14*13*12*) / 6
(14*13*12) / 6
8*7*6*5*4*3*2*1
336/6
.5**(-1)
.5
.5**(-1)
.5**-1
.5**-5
sqrt(-6)
sqrt(14)
sqrt(1)
9-2*sqrt(3)
8*7*6*5*4*3*2*1
5*4*3*2*1
8*7*6
.25*.5
3/8
(1/2)^3
1/8
38/100
(5*26) * (4*25)
(1/6) * (1/6) * 1
(1/6) * (1/6) * 6
9**7
9*10**6
options(scipen=999)
9*10**6
(8*7*6)
9*10**6
10/9000000
(8*7*6*5*4*3*2*1) / (3*2*1)
(3*2*1)
(8*7*6*5*4*3*2*1) / (5*4*3*2*1) / (3*2*1)
5*4*3*2*1
(10*9*8*7*6*5*4*3*2*1)
(8*7*6*5*4*3*2*1) / (5*4*3*2*1) / (3*2*1)
(10*9*8*7*6*5*4*3*2*1)
(10*9*8*7*6*5*4*3*2*1)
(10*9*8*7*6*5*4*3*2*1) / (10*9*8)
(10*9*8*7*6*5*4*3*2*1) / (7*6*5*4*3*2*1)
36*35
52*51
1260/2
2652/2
1260/2/2
2652/2/2
1260/2/2/3
2652/2/2/3
1260/2/2/3
2652/2/2/3
1260/2/2/3/3
2652/2/2/3/3
1260/2/2/3
2652/2/2/3
1260/2/2/3
2652/2/2/3
1260/2/2/3
2652/2/2/3
36/52
36/2
52/2
36/2/2
52/2/2
1260/2652
(3/52) * (2/51) * (1/50)
10**4
5/5
10000/5
36**2
4/4
1296/4
30*29*28
3/3
24360/3
4/2/2
36/2/2
30*29*28
30-3
(30*29*28) / (3*2*1)
36^2
36**2
11*10*9*8*7*6*5*4*3*2*1
(30*29*28)
(30*29*28) =
(30*29*28)
(30*29*28)
(10*9*8*7*6*5*4*3*2*1) / (7*6*5*4*3*2*1) = 720 odds of choosing are 1/720
(3*2*1)
.5 * .5 * .5
1- .5 * .5 * .5
1/100**100
option(scipen=999)
1/100**100
99/100**100
option(scipen=999)
options(scipen=999)
99/100**100
99/100
(99/100)**100
.05*.20
.5*.20
.5*20
.05*20
.08*80
6.4/80
80/100
.08 *  0.8
1/5
20/100
16-9
sqrt(7)
?mean
# Set working dir if you download this locally
# getwd()
setwd("/Users/Shep/git/SQLShepBlog/data")
epa <- read.csv("18tstcar.csv",stringsAsFactors=FALSE)
library(dplyr)
library(ggplot2)
library(GGally)
names(epa)[12] <-paste("Cylinders")
names(epa)[46] <-paste("FuelEcon")
colnames(epa)[colnames(epa)=="X..of.Gears"] <- "Gears"
colnames(epa)[colnames(epa)=="Axle.Ratio"] <- "AxleRatio"
epa <- dplyr::rename(epa, HorsePower = "Rated.Horsepower")
epa <- dplyr::rename(epa, Weight = "Equivalent.Test.Weight..lbs..")
epa <- dplyr::rename(epa, Model = "Represented.Test.Veh.Model")
# now that we have a much larger dataset we can do a few visualizations to confirm some prior hypothesis.
ggplot(epa,aes(FuelEcon,Weight))+
geom_point()
filter(epa,   FuelEcon > 9000)
epa[epa$Test.Vehicle.ID == "184HV863DA" ,]
epa[epa$Test.Vehicle.ID == "184HV863DA" ,c("Represented.Test.Veh.Make","Model","Test.Vehicle.ID","FuelEcon")]
epa <- (filter(epa, FuelEcon < 9999))
ggplot(epa,aes(FuelEcon,Weight))+
geom_point()
ggplot(epa, aes(FuelEcon,Weight)) +
geom_point() +
geom_text(data=subset(epa, FuelEcon > 90),aes(FuelEcon,Weight,label=Model), vjust=-.5, hjust=.10)
filter(epa, FuelEcon > 100)
epa[epa$FuelEcon > 100 ,c("Represented.Test.Veh.Make","Model","Test.Vehicle.ID","FuelEcon")]
mean(epa$FuelEcon) + mean(epa$FuelEcon)*2
mean(epa$FuelEcon) - mean(epa$FuelEcon)*2
View(filter(epa,   Test.Procedure.Description == "Charge Depleting Highway" | Test.Procedure.Description == "Charge Depleting UDDS"))
epa <- filter(epa,   Test.Procedure.Description != "Charge Depleting Highway" & Test.Procedure.Description != "Charge Depleting UDDS")
ggplot(epa,aes(FuelEcon,Weight))+
geom_point()
summary(as.factor(epa$Weight))
View(filter(epa,   Represented.Test.Veh.Make == "BENTLEY" & Model == "Continental GT" ))
epa <- filter(epa,   Test.Procedure.Description != "Charge Depleting Highway" & Test.Procedure.Description != "Charge Depleting UDDS")
ggplot(epa,aes(FuelEcon,Weight))+
geom_point()
summary(as.factor(epa$Weight))
View(filter(epa,   Represented.Test.Veh.Make == "BENTLEY" & Model == "Continental GT" ))
k<-table(epa$Test.Vehicle.ID)
head(sort(k,decreasing = TRUE))
head(sort(k,decreasing = TRUE))
View(filter(epa, epa$Test.Vehicle.ID == "53XECSE012"))
k1<-filter(epa, epa$Test.Vehicle.ID == "53XECSE012")
table(k1$Model,k1$Test.Fuel.Type.Description)
table(k1$Test.Fuel.Type.Description,round(k1$FuelEcon))
k1<-filter(epa, epa$Test.Vehicle.ID == "EGAA1M")
table(k1$Model,k1$Test.Fuel.Type.Description)
table(k1$Test.Fuel.Type.Description,round(k1$FuelEcon))
# Remove Police Vehicles
View(filter(epa, epa$Police...Emergency.Vehicle. == "Y"))
table(epa$Police...Emergency.Vehicle.)
epa <- filter(epa,epa$Police...Emergency.Vehicle. != "Y" )
View(distinct(epa,Vehicle.Manufacturer.Name
,Veh.Mfr.Code
,Represented.Test.Veh.Make
,Model
,Test.Vehicle.ID
,Test.Veh.Displacement..L.
,Drive.System.Description
,AxelRatio
,Weight
,Test.Fuel.Type.Cd
, .keep_all = TRUE))
epa <- (distinct(epa,Vehicle.Manufacturer.Name
,Veh.Mfr.Code
,Represented.Test.Veh.Make
,Model
,Test.Vehicle.ID
,Test.Veh.Displacement..L.
,Drive.System.Description
,AxelRatio
,Weight
,Test.Fuel.Type.Cd
, .keep_all = TRUE) )
View(epa)
View(epa)
View(epa[c(4,5,10,11,12,14,15,16,18,22,23,34,35,36,37,46)])
epaMpg <- epa[c(4,5,10,11,12,14,15,16,18,22,23,34,35,36,37,46)]
names(epa)
names(epaMPG)
names(epaMpg)
epaMpg$Cylinders <- as.factor(epaMpg$Cylinders)
epaMpg$Tested.Transmission.Type.Code <- as.factor(epaMpg$Tested.Transmission.Type.Code)
epaMpg$Gears <- as.factor(epaMpg$Gears)
epaMpg$Test.Procedure.Cd <- as.factor(epaMpg$Test.Procedure.Cd)
epaMpg$Drive.System.Code <- as.factor(epaMpg$Drive.System.Code)
epaMpg$Test.Fuel.Type.Cd <- as.factor(epaMpg$Test.Fuel.Type.Cd)
epaMpg <- epaMpg[!is.na(epaMpg$Cylinders),]
ggpairs(epaMpg[c(3:6,14)])
# Set working dir if you download this locally
# getwd()
setwd("/Users/Shep/git/SQLShepBlog/data")
epa <- read.csv("18tstcar.csv",stringsAsFactors=FALSE)
names(epa)[12] <-paste("Cylinders")
names(epa)[46] <-paste("FuelEcon")
colnames(epa)[colnames(epa)=="X..of.Gears"] <- "Gears"
colnames(epa)[colnames(epa)=="Axle.Ratio"] <- "AxleRatio"
epa <- dplyr::rename(epa, HorsePower = "Rated.Horsepower")
epa <- dplyr::rename(epa, Weight = "Equivalent.Test.Weight..lbs..")
epa <- dplyr::rename(epa, Model = "Represented.Test.Veh.Model")
# now that we have a much larger dataset we can do a few visualizations to confirm some prior hypothesis.
ggplot(epa,aes(FuelEcon,Weight))+
geom_point()
filter(epa,   FuelEcon > 9000)
epa[epa$Test.Vehicle.ID == "184HV863DA" ,]
epa[epa$Test.Vehicle.ID == "184HV863DA" ,c("Represented.Test.Veh.Make","Model","Test.Vehicle.ID","FuelEcon")]
epa <- (filter(epa, FuelEcon < 9999))
summary(epa$FuelEcon)
NROW(epa)
ggplot(epa,aes(FuelEcon,Weight))+
geom_point()
ggplot(epa, aes(FuelEcon,Weight)) +
geom_point() +
geom_text(data=subset(epa, FuelEcon > 90),aes(FuelEcon,Weight,label=Model), vjust=-.5, hjust=.10)
filter(epa, FuelEcon > 100)
epa[epa$FuelEcon > 100 ,c("Represented.Test.Veh.Make","Model","Test.Vehicle.ID","FuelEcon")]
mean(epa$FuelEcon) + mean(epa$FuelEcon)*2
mean(epa$FuelEcon) - mean(epa$FuelEcon)*2
View(filter(epa,   Test.Procedure.Description == "Charge Depleting Highway" | Test.Procedure.Description == "Charge Depleting UDDS"))
epa[epa$FuelEcon > 100 ,c("Represented.Test.Veh.Make","Model","Test.Vehicle.ID","FuelEcon")]
mean(epa$FuelEcon) + mean(epa$FuelEcon)*2
mean(epa$FuelEcon) - mean(epa$FuelEcon)*2
View(filter(epa,   Test.Procedure.Description == "Charge Depleting Highway" | Test.Procedure.Description == "Charge Depleting UDDS"))
epa <- filter(epa,   Test.Procedure.Description != "Charge Depleting Highway" & Test.Procedure.Description != "Charge Depleting UDDS")
ggplot(epa,aes(FuelEcon,Weight))+
geom_point()
View(filter(epa,   Represented.Test.Veh.Make == "BENTLEY" & Model == "Continental GT" ))
table(epa$Test.Procedure.Description)
epa <- filter(epa,epa$Police...Emergency.Vehicle. != "Y" )
epa <- (distinct(epa,Vehicle.Manufacturer.Name
,Veh.Mfr.Code
,Represented.Test.Veh.Make
,Model
,Test.Vehicle.ID
,Test.Veh.Displacement..L.
,Drive.System.Description
,AxelRatio
,Weight
,Test.Fuel.Type.Cd
, .keep_all = TRUE) )
epaMpg <- epa[c(4,5,10,11,12,14,15,16,18,22,23,34,35,36,37,46)]
epaMpg$Cylinders <- as.factor(epaMpg$Cylinders)
epaMpg$Tested.Transmission.Type.Code <- as.factor(epaMpg$Tested.Transmission.Type.Code)
epaMpg$Gears <- as.factor(epaMpg$Gears)
epaMpg$Test.Procedure.Cd <- as.factor(epaMpg$Test.Procedure.Cd)
epaMpg$Drive.System.Code <- as.factor(epaMpg$Drive.System.Code)
epaMpg$Test.Fuel.Type.Cd <- as.factor(epaMpg$Test.Fuel.Type.Cd)
epaMpg <- epaMpg[!is.na(epaMpg$Cylinders),]
View(epaMpg)
View(epaMpg)
options(scipen = 999)
View(epaMpg)
options(scipen = 999)
epaMpg.1 <- lm(FuelEcon ~ HorsePower + Cylinders + Tested.Transmission.Type.Code + Gears + Drive.System.Code + Weight + AxleRatio + Test.Procedure.Cd + Test.Fuel.Type.Cd,data=epaMpg)
summary(epaMpg.1)
HorsePower <- c(395,1500,395)
Cylinders <- as.factor(c(8,16,8))
Tested.Transmission.Type.Code <- as.factor(c("A","SA","A"))
Gears <-as.factor(c(8,8,8))
Drive.System.Code <- as.factor(c(4,"A",4))
Weight <- c(5500,4750,5500)
AxleRatio <-c(3.21,3.64,3.21)
Test.Procedure.Cd <- as.factor(c(90,90,3))
Test.Fuel.Type.Cd <- as.factor(c(61,61,61))
newcars = data.frame(HorsePower,Cylinders,Tested.Transmission.Type.Code,Gears,Drive.System.Code,Weight,AxleRatio,Test.Procedure.Cd,Test.Fuel.Type.Cd)
predict(epaMpg.1,newdata=newcars,interval="confidence")
View(epaMpg)
View(epaMpg)
HorsePower <- c(395,1500,70)
Cylinders <- as.factor(c(8,16,4))
Tested.Transmission.Type.Code <- as.factor(c("A","SA","CVT"))
Gears <-as.factor(c(8,8,1))
Drive.System.Code <- as.factor(c(4,"A","F"))
Weight <- c(5500,4750,2800)
AxleRatio <-c(3.21,3.64,3.2)
Test.Procedure.Cd <- as.factor(c(90,90,90))
Test.Fuel.Type.Cd <- as.factor(c(61,61,61))
newcars = data.frame(HorsePower,Cylinders,Tested.Transmission.Type.Code,Gears,Drive.System.Code,Weight,AxleRatio,Test.Procedure.Cd,Test.Fuel.Type.Cd)
predict(epaMpg.1,newdata=newcars,interval="confidence")
write.csv(epaMpg, file = epaMpg.csv)
write.csv(epaMpg, file = "epaMpg.csv")
epaMpg <- read.csv("18tstcar.csv",stringsAsFactors=FALSE)
epaMpg <- read.csv("epaMpg.csv",stringsAsFactors=FALSE)
View(epaMpg)
View(epaMpg)
View(epaMpg)
summary(epaMpg)
epaMpg$Cylinders <- as.factor(epaMpg$Cylinders)
epaMpg$Tested.Transmission.Type.Code <- as.factor(epaMpg$Tested.Transmission.Type.Code)
epaMpg$Gears <- as.factor(epaMpg$Gears)
epaMpg$Test.Procedure.Cd <- as.factor(epaMpg$Test.Procedure.Cd)
epaMpg$Drive.System.Code <- as.factor(epaMpg$Drive.System.Code)
epaMpg$Test.Fuel.Type.Cd <- as.factor(epaMpg$Test.Fuel.Type.Cd)
epaMpg <- epaMpg[!is.na(epaMpg$Cylinders),]
options(scipen = 999)
epaMpg.1 <- lm(FuelEcon ~ HorsePower + Cylinders + Tested.Transmission.Type.Code + Gears + Drive.System.Code + Weight + AxleRatio + Test.Procedure.Cd + Test.Fuel.Type.Cd,data=epaMpg)
summary(epaMpg.1)
##stepwise regression forward
epaMpg.fwd1 <- step(lm(FuelEcon~1,data=epaMpg), direction = "forward",
scope=(~HorsePower + Cylinders + Tested.Transmission.Type.Code + Gears + Drive.System.Code + Weight + AxleRatio + Test.Procedure.Cd + Test.Fuel.Type.Cd))
summary(epaMpg.fwd1)
summary(epaMpg.fwd1)
confint(epaMpg.fwd1, level=0.95)
anova(epaMpg.fwd1, level=0.95)
anova(epaMpg.fwd1)
influence(epaMpg.fwd1)
ols_best_subset(epaMpg.1)
ols_all_subset(epaMpg.1)
library(olsrr)
options(scipen = 999)
epaMpg.1 <- lm(FuelEcon ~ HorsePower + Cylinders + Tested.Transmission.Type.Code + Gears + Drive.System.Code + Weight + AxleRatio + Test.Procedure.Cd + Test.Fuel.Type.Cd,data=epaMpg)
summary(epaMpg.1)
ols_all_subset(epaMpg.1)
ols <- ols_all_subset(epaMpg.1)
plot(ols)
epaMpg.back1 <- step(lm(FuelEcon ~ HorsePower + Cylinders + Tested.Transmission.Type.Code + Gears + Drive.System.Code + Weight + AxleRatio + Test.Procedure.Cd + Test.Fuel.Type.Cd,data=epaMpg), direction = "backward")
summary(epaMpg.back1)
aic(epaMpg.1,epaMpg.back1,epaMpg.fwd1 )
anova(epaMpg.1,epaMpg.back1,epaMpg.fwd1)
coef(summary(epaMpg.1))
coef(summary(epaMpg.1))
options(scipen = 3)
coef(summary(epaMpg.1))
2**9
ols <- ols_all_subset(epaMpg.1)
2**20
ols
ols(20)
type(ols)
head(ols)
head(ols,30)
ols(:)
ols
View(ols)
View(ols)
View(ols)
plot(ols)
View(ols)
View(ols)
View(ols)
View(ols)
epaMpg <- read.csv("epaMpg.csv",stringsAsFactors=FALSE)
summary(epaMpg)
epaMpg$Cylinders <- as.factor(epaMpg$Cylinders)
epaMpg$Tested.Transmission.Type.Code <- as.factor(epaMpg$Tested.Transmission.Type.Code)
epaMpg$Gears <- as.factor(epaMpg$Gears)
epaMpg$Test.Procedure.Cd <- as.factor(epaMpg$Test.Procedure.Cd)
epaMpg$Drive.System.Code <- as.factor(epaMpg$Drive.System.Code)
epaMpg$Test.Fuel.Type.Cd <- as.factor(epaMpg$Test.Fuel.Type.Cd)
epaMpg <- epaMpg[!is.na(epaMpg$Cylinders),]
# scipen will just blow out the  scientific notation, i like to see the number.
options(scipen = 999)
# this should be familiar by now.
epaMpg.1 <- lm(FuelEcon ~ HorsePower + Cylinders + Tested.Transmission.Type.Code + Gears + Drive.System.Code + Weight + AxleRatio + Test.Procedure.Cd + Test.Fuel.Type.Cd,data=epaMpg)
summary(epaMpg.1)
epaMpg <- read.csv("epaMpg.csv",stringsAsFactors=FALSE)
summary(epaMpg)
epaMpg$Cylinders <- as.factor(epaMpg$Cylinders)
epaMpg$Tested.Transmission.Type.Code <- as.factor(epaMpg$Tested.Transmission.Type.Code)
epaMpg$Gears <- as.factor(epaMpg$Gears)
epaMpg$Test.Procedure.Cd <- as.factor(epaMpg$Test.Procedure.Cd)
epaMpg$Drive.System.Code <- as.factor(epaMpg$Drive.System.Code)
epaMpg$Test.Fuel.Type.Cd <- as.factor(epaMpg$Test.Fuel.Type.Cd)
epaMpg <- epaMpg[!is.na(epaMpg$Cylinders),]
# scipen will just blow out the  scientific notation, i like to see the number.
options(scipen = 999)
# this should be familiar by now.
epaMpg.1 <- lm(FuelEcon ~ HorsePower + Cylinders + Tested.Transmission.Type.Code + Gears + Drive.System.Code + Weight + AxleRatio + Test.Procedure.Cd + Test.Fuel.Type.Cd,data=epaMpg)
summary(epaMpg.1)
HorsePower <- c(395,1500,70)
Cylinders <- as.factor(c(8,16,4))
Tested.Transmission.Type.Code <- as.factor(c("A","SA","CVT"))
Gears <-as.factor(c(8,8,1))
Drive.System.Code <- as.factor(c(4,"A","F"))
Weight <- c(5500,4750,2800)
AxleRatio <-c(3.21,3.64,3.2)
Test.Procedure.Cd <- as.factor(c(90,90,90))
Test.Fuel.Type.Cd <- as.factor(c(61,61,61))
newcars = data.frame(HorsePower,Cylinders,Tested.Transmission.Type.Code,Gears,Drive.System.Code,Weight,AxleRatio,Test.Procedure.Cd,Test.Fuel.Type.Cd)
predict(epaMpg.1,newdata=newcars,interval="confidence")
ggplot(epa,aes(FuelEcon,AxleRatio))+
geom_point()
