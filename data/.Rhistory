x + y -z
(4*3*2*1) * 2
x = 100/4
y = 100/9
z = 100/(4*9)
x + y -z
z = (100/(4*9))
x + y -z
z = int(100/(4*9))
z = int(100/(4*9))
z = int(100/(4*9))
y = int(100/9)
x = int(100/4)
(100//4)
(100/4)
(100/(4*9))
x = (100%/%4)
y = (100%/%9)
z = (100%/%(4*9))
x + y -z
(4*3*2*1)
x = (100%/%5)
y = (100%/%8)
z = (100%/%(5*8))
x + y -z
x = (100%/%5)
y = (100%/%3)
z = (100%/%(5*3))
x + y -z
(6*5*4*3*2*1) / (2*1)
(3*2*1) * (2)
x = (100%/%2)
y = (100%/%3)
z = (100%/%(2*3))
x + y -z
(5*4*3*2*1) / (3*2*1)
(4*3*2*1) / (2)
(5*4*3*2*1) / 2
(4*3*2*1) / 2
(5*4*3*2*1) / 2
(4*3*2*1)
(4*3*2*1)
(4*3*2*1)
(4*3*2*1) * 2
(5*4*3*2*1) - (4*3*2*1) * 2
(4*3*2*1) - (3*2*1) *  2
x = (100%/%3)
y = (100%/%10)
z = (100%/%(3*10))
x + y -z
2^4
4.9*3
4.9*3^2
4.9*(3^2)
2*7*5
(7+5)*(7-5)
7*4
7*7/13
18/3
a = (10,2,38,23,38,23,21,5)
a = (10,2,38,23,38,23,21,5)
a <= (10,2,38,23,38,23,21,5)
a <= c(10,2,38,23,38,23,21,5)
a <- c(10,2,38,23,38,23,21,5)
var(a)
b = c(-5,3,12,190,-10)
var(b)
std(b)
stdev(b)
sd(b)
1- (3/6 * 1/2)
(1/2)**3
9*8*7*6*5*4*3 / 2*1
9*8*7*6*5*4*3
9**6
9**7
9*10**6
9999999 - 1000000
9*10**6
10/9*10**6
9*10**6
options(scipen=999)
10/9*10**6
9*10**6
10/(9*10**6)
(9*10**6)
(9*10**6)/10
(3/10) * (2/9) * (1/8)
10*9*8
1/ 10*9*8
(10*9*8*7*6)
(10*9*8*7*6) / (5*4*3*2*1)
16*15*14*13*12*11*10*9*8*7*6*5*4*3*2*1
options(scipen=999)
16*15*14*13*12*11*10*9*8*7*6*5*4*3*2*1
16*15*14
10*9*8*7*6*5*4*3*2*1
4*3*2*1
13*12*11*10*9*8*7*6*5*4*3*2*1
16*15*14*13*12*11*10*9*8*7*6*5*4*3*2*1 / 13*12*11*10*9*8*7*6*5*4*3*2*1
(16*15*14*13*12*11*10*9*8*7*6*5*4*3*2*1) / (13*12*11*10*9*8*7*6*5*4*3*2*1)
10*9*8*7*6*5*4*3*2*1
8*7*6*5*4*3*2*1
16*15*14
(16*15*14*13*12*11*10*9*8*7*6*5*4*3*2*1)
(16*15*14*13*12*11*10*9*8*7*6*5*4*3*2*1) / 3*(13*12*11*10*9*8*7*6*5*4*3*2*1)
(16*15*14*13*12*11*10*9*8*7*6*5*4*3*2*1) / (13*12*11*10*9*8*7*6*5*4*3*2*1)
(13*12*11*10*9*8*7*6*5*4*3*2*1)
(16*15*14*13*12*11*10*9*8*7*6*5*4*3*2*1) / (3*2*1)*(13*12*11*10*9*8*7*6*5*4*3*2*1)
(16*15*14*13*12*11*10*9*8*7*6*5*4*3*2*1) / ((3*2*1)*(13*12*11*10*9*8*7*6*5*4*3*2*1))
13*12*11*10*9*8*7*6*5*4*3*2*1
20922789888000/(6*6227020800)
(7*6*5*4*3*2*1) / ((3*2*1)(4*3*2*1))
(7*6*5*4*3*2*1) / ((3*2*1)*(4*3*2*1))
(7*6*5) / ((3*2*1))
10*9*8
26*25*24*23
10*9*8*7*6
(10*9*8*7*6) / (5*4*3*2*1)
(9*8*7*6) / (5*4*3*2*1)
(9*8*7*6) / (4*3*2*1)
26*25*24*23
26! / 4!(26-4)!
(26-4)
(26*25*24*23) / ((4*3*2*1)*(22*21*20*19*18*17*16*15*14*13*12*11*10*9*8*7*6*5*4*3*2*1))
(26*25*24*23*22*21*20*19*18*17*16*15*14*13*12*11*10*9*8*7*6*5*4*3*2*1) / ((4*3*2*1)*(22*21*20*19*18*17*16*15*14*13*12*11*10*9*8*7*6*5*4*3*2*1))
(26*25*24*23*22*21*20*19*18*17*16*15*14*13*12*11*10*9*8*7*6*5*4*3*2*1)
26*25*24*23*22
26*25*24*23
26*26*10*10*10
8*7*6*5*4*3*2*1
6*5*4*3*2*1
4*3*2*1
2*1
5*4*3*2*1
10*9*8*7*6*5*4*3*2*1
14*13*12*11*10*9*8*7*6*5*4*3*2*1
14*13*12*11*10*9*8*7*6*5*4*3*2*1 / (1*2*3)
(14*13*12*11*10*9*8*7*6*5*4*3*2*1) / (1*2*3)
(14*13*12*11*10*9*8*7*6*5*4*3*2*1) / (14*13*12)
(14*13*12*) / (6)
(14*13*12*) / 6
(14*13*12) / 6
8*7*6*5*4*3*2*1
336/6
.5**(-1)
.5
.5**(-1)
.5**-1
.5**-5
sqrt(-6)
sqrt(14)
sqrt(1)
9-2*sqrt(3)
8*7*6*5*4*3*2*1
5*4*3*2*1
8*7*6
.25*.5
3/8
(1/2)^3
1/8
38/100
(5*26) * (4*25)
(1/6) * (1/6) * 1
(1/6) * (1/6) * 6
9**7
9*10**6
options(scipen=999)
9*10**6
(8*7*6)
9*10**6
10/9000000
(8*7*6*5*4*3*2*1) / (3*2*1)
(3*2*1)
(8*7*6*5*4*3*2*1) / (5*4*3*2*1) / (3*2*1)
5*4*3*2*1
(10*9*8*7*6*5*4*3*2*1)
(8*7*6*5*4*3*2*1) / (5*4*3*2*1) / (3*2*1)
(10*9*8*7*6*5*4*3*2*1)
(10*9*8*7*6*5*4*3*2*1)
(10*9*8*7*6*5*4*3*2*1) / (10*9*8)
(10*9*8*7*6*5*4*3*2*1) / (7*6*5*4*3*2*1)
36*35
52*51
1260/2
2652/2
1260/2/2
2652/2/2
1260/2/2/3
2652/2/2/3
1260/2/2/3
2652/2/2/3
1260/2/2/3/3
2652/2/2/3/3
1260/2/2/3
2652/2/2/3
1260/2/2/3
2652/2/2/3
1260/2/2/3
2652/2/2/3
36/52
36/2
52/2
36/2/2
52/2/2
1260/2652
(3/52) * (2/51) * (1/50)
10**4
5/5
10000/5
36**2
4/4
1296/4
30*29*28
3/3
24360/3
4/2/2
36/2/2
30*29*28
30-3
(30*29*28) / (3*2*1)
36^2
36**2
11*10*9*8*7*6*5*4*3*2*1
(30*29*28)
(30*29*28) =
(30*29*28)
(30*29*28)
(10*9*8*7*6*5*4*3*2*1) / (7*6*5*4*3*2*1) = 720 odds of choosing are 1/720
(3*2*1)
.5 * .5 * .5
1- .5 * .5 * .5
1/100**100
option(scipen=999)
1/100**100
99/100**100
option(scipen=999)
options(scipen=999)
99/100**100
99/100
(99/100)**100
.05*.20
.5*.20
.5*20
.05*20
.08*80
6.4/80
80/100
.08 *  0.8
1/5
20/100
16-9
sqrt(7)
?mean
library(ISLR)
namesSmarket)
name(sSmarket)
names(Smarket)
dim(Smarket)
summary(Smarket)
View(Smarket())
View(Smarket)
pairs(Smarket)
pairs(Smarket)
cor(Smarket[,-9])
plot(Smarket$Volume)
plot(Smarket$Year,Smarket$Volume)
plot(Smarket$Volume)
glm.fit <- glm(Direction~Lag1+Lag2+Lag3+Lag4+Lag5+Volume,data=Smarket,family=binomial)
summary(glm.fit)
coef(glm.fit)
summary(glm.fit)$coef
summary(glm.fit)$coef[,4]
glm.probs <- predict(glm.fit,type="response")
glm.probs[1:20]
contrasts(Direction)
contrasts(Smarket$Direction)
glm.pred
glm.pred<- rep("Down",1250)
glm.pred[glm.probs>.5]
glm.pred[glm.probs>.5]="Up"
glm.pred
table(glm.pred,Smarket$Direction)
(507 + 145) /1250
mean(glm.pred==SmarketDirection)
mean(glm.pred==Smarket$Direction)
glm.pred==Smarket$Direction
glm.pred
glm.pred
Smarket$Direction
table(glm.pred,Smarket$Direction)
glm.pred
glm.probs
train<=(Smarket$Year < 2005)
train<-(Smarket$Year < 2005)
Smarket.2005 <- Smarket[!train]
Smarket.2005 <- Smarket[!train,]
View(Smarket.2005)
View(Smarket.2005)
Direction.2005 <-Direction[!train]
Direction.2005 <-Smarket$Direction[!train]
glm.fit <- glm(Direction~Lag1+Lag2+Lag3+Lag4+Lag5+Volume,data=Smarket,family=binomialsubset=train)
glm.fit <- glm(Direction~Lag1+Lag2+Lag3+Lag4+Lag5+Volume,data=Smarket,family=binomial,subset=train)
glm.probs <- predict(glm.fit,,Smarket.2005,type="response")
Smarket.2005
glm.probs <- predict(glm.fit,Smarket.2005,type="response")
glm.pred<-rep("Down",252)
glm.pred
glm[pred.probs>.5] ="Up"
glm.pred[pred.probs>.5] ="Up"
glm.pred<-rep("Down",252)
glm.pred[pred.probs>.5] ="Up"
glm.probs <- predict(glm.fit,Smarket.2005,type="response")
glm.fit <- glm(Direction~Lag1+Lag2+Lag3+Lag4+Lag5+Volume,data=Smarket,family=binomial,subset=train)
glm.probs <- predict(glm.fit,Smarket.2005,type="response")
glm.pred<-rep("Down",252)
glm.pred[glm.probs>.5] ="Up"
table(glm.pred,Smarket$Direction.2005)
table(glm.pred,Direction.2005)
mean(glm.pred==Smarket$Direction)
train<-(Smarket$Year < 2005)
mean(glm.pred==Direction.2005)
mean(glm.pred!=Direction.2005)
glm.fit <- glm(Direction~Lag1+Lag2,data=Smarket,family=binomial,subset=train)
glm.probs <- predict(glm.fit,Smarket.2005,type="response")
glm.pred<-rep("Down",252)
glm.pred[glm.probs>.5] ="Up"
table(glm.pred,Direction.2005)
mean(glm.pred==Direction.2005)
mean(glm.pred!=Direction.2005)
library(ISLR)
names(Smarket)
dim(Smarket)
summary(Smarket)
View(Smarket)
1**2 + 2**2 3**2 + 3**2 + 2**2 + 1**2
(1**2)
(1**2) + (2**2)
(1**2) + (2**2) + 3**2 + 3**2 + 2**2 + 1**2
(1**2) + (2**2) + (3**2) + (3**2) + (2**2) + (1**)
(1**2) + (2**2) + (3**2) + (3**2) + (2**2) + (1**2)
sqrt((1**2) + (2**2) + (3**2) + (3**2) + (2**2) + (1**2) )
sqrt((1**2) + (2**2) + (3**2))
sqrt((3**2) + (2**2) + (1**2))
sqrt((1**2) + (2**2) + (3**2))
sqrt((1**2) + (2**2) + (3**2)) + sqrt((3**2) + (2**2) + (1**2))
2 sqrt((1**2) + (2**2) + (3**2)) + sqrt((3**2) + (2**2) + (1**2))
2.82**2
sqrt(sqrt((1**2) + (2**2) + (3**2)) + sqrt((3**2) + (2**2) + (1**2)))
sqrt(sqrt((1**2) + (2**2) + (3**2)) + sqrt((3**2) + (2**2) + (1**2)))
(sqrt((1**2) + (2**2) + (3**2)) + sqrt((3**2) + (2**2) + (1**2)))
(.125 + .05 + .05 + .025)
(.125 + .05 + .05 + .025)/4
1-.125
(.125 + .05 + .05 + .025)
(.125 * .05 * .05 * .025)
.5*.2*.2*.1
(.5 + .8 + .8 + .9)/4
1**2 + 2**2 + 3**2 + 4**2
sqrt(30)
sqrt(1**2 + 2**2 + 3**2 + 4**2)
sqrt(-1**2 + 1**2 + -1**2 + 1**2)
sqrt(1**2 + 1**2 + 1**2 + 1**2)
sqrt(1**2 + 1**2 + 1**2 + 1**2) + sqrt(-1**2 + 1**2 + -1**2 + 1**2)
sqrt(1**2 + 1**2 + 1**2 + 1**2) + sqrt(-1**2 + 1**2 + -1**2 + 1**2)
sqrt(sqrt(1**2 + 1**2 + 1**2 + 1**2) + sqrt(-1**2 + 1**2 + -1**2 + 1**2))
2*sqrt(sqrt(1**2 + 1**2 + 1**2 + 1**2) + sqrt(-1**2 + 1**2 + -1**2 + 1**2))
library(class)
attach(Smarket)
train=(Year<2005)
train.X = cbind(Lag1,Lag2)[trrain,]
train.X = cbind(Lag1,Lag2)[train,]
test.X = cbind(Lag1,Lag2)[!train,]
train.Direction=Direction[train]
train.Direction
knn.pred=knn(train.X, test.X, train.Direction,k=1 )
table(knn.pred,Direction.2005)
Direction.2005=Direction[!train]
table(knn.pred,Direction.2005)
knn.pred=knn(train.X, test.X, train.Direction,k=3 )
table(knn.pred,Direction.2005)
2**5
-178.5719123 + (2.706977216 *80) + (1.916846903 * 110) + (-131.9315256*.35)
-178.5719123 + (2.706977216 *80) + (1.916846903 * 120) + (-131.9315256*.35)
ln
log
log(100)
log(1000)
log(60000)
log2(60000)
?log2(60000)
head(flights,20)
12**15%17
12**15%17
12**15
12**15%%17
6**13%%17
Generator**AliceRand%%PrimeModulus
PrimeModulus = 17
Generator = 3
AliceRand = 15
BobRand =
PrimeModulus = 17
Generator = 3
AliceRand = 15
PrimeModulus = 17
Generator = 3
AliceRand = 15
Generator**AliceRand%%PrimeModulus
BobRand = 13
Generator**BobRand%%PrimeModulus
12**AliceRand%%PrimeModulus
6**BobRand%%PrimeModulus
Generator**BobRand**AliceRand%%17
Generator**(BobRand**AliceRand))%%17
Generator**(BobRand**AliceRand)
BobRand**AliceRand
(Generator**(BobRand**AliceRand))
(Generator**(BobRand**AliceRand))%%17
BobRand**AliceRand
Generator**(BobRand**AliceRand)
Generator^(BobRand^AliceRand)
BobRand^AliceRand
Generator^BA %%17
BA = BobRand^AliceRand
Generator^BA %%17
BobRand^AliceRand
BA = BobRand^AliceRand
Generator^BA
Generator = 3
Generator^BA %%17
Generator^BA
Generator^BobRand^AliceRand
Generator^BobRand
^BobRand^AliceRand
BobRand^AliceRand
Generator^BobRand^AliceRand %%17
100(1.1)^2
100(1.1)**2
100*(1.1)**2
100*(1.1)**3
100*(1.1)**4
100*(1.1)**5
100*(1.1)**7
100*(1.1)**2
100*(1.1)**1
100*(1.1)**2
100*(1.1)
100*(1.1)**1 #Year 1
100*(1.1)**2 #Year 1
100*(1.1)**3  # 3 years
100*(1.1)**2  # 2 years
100*(1.1)**2 #Year 2
100*(.1) #Year 1
100 + 100*(.1) #Year 1
1 * 100 + (100*(.1) #Year 1)
1 * 100 + (100*(.1))
1 * 100 + (100*(.1))
2 * 100 + (100*(.1))#Year 1
100 + 2*(100*(.1))#Year 1
100 + 3*(100*(.1))#Year 1
100*(1.1)**3  # 3 years
100 + 3*(100*(.1))#Year 3
100 + 2*(100*(.1))#Year 2
100*(1.1)**3  # 3 years
100*(1.1)**2  # 2 years
100 + 3*(100*(.1))#Year 7
100 + 7*(100*(.1))#Year 7 = 130
100*(1.1)**7  # 7 years = 133.1
100*(1.15)**20 # 20 years 15%
50*(1.15)**20 # 20 years 15% = 1636.65
50 + 20*(100*(.15))#Year 7 = 170
22.9/365
100*(1.0006273973)*(1.0006273973) #day 3 you owe
100*(0.0006273973)**365
100*(1.0006273973)**365
1*(1.0006273973)**365 #day 365 you owe
1.257252
6/12
1 / (1+ .01)
# L = 200k, i = .5% or .005, n= 360 months
# Find R value
1 / (1 + .005)
200000 * (1 - .9950249) / (.9950249 - .9950249**360)
nstall.packages(c('repr', 'IRdisplay', 'evaluate', 'crayon', 'pbdZMQ', 'devtools', 'uuid', 'digest'))
install.packages(c('repr', 'IRdisplay', 'evaluate', 'crayon', 'pbdZMQ', 'devtools', 'uuid', 'digest'),repos='http://cran.us.r-project.org')
devtools::install_github('IRkernel/IRkernel')
IRkernel::installspec()
conda install -c r r-essentials
conda install -c r r-essentials
conda install -c r r-essentials
exit
quit()
log2(20000)
library(dplyr)
library(ggplot2)
library(GGally)
# Set working dir if you download this locally
# getwd()
setwd("/Users/Shep/git/SQLShepBlog/data")
epa <- read.csv("18tstcar.csv",stringsAsFactors=FALSE)
names(epa)[12] <-paste("Cylinders")
names(epa)[46] <-paste("FuelEcon")
colnames(epa)[colnames(epa)=="X..of.Gears"] <- "Gears"
colnames(epa)[colnames(epa)=="Axle.Ratio"] <- "AxleRatio"
epa <- dplyr::rename(epa, HorsePower = "Rated.Horsepower")
epa <- dplyr::rename(epa, Weight = "Equivalent.Test.Weight..lbs..")
epa <- dplyr::rename(epa, Model = "Represented.Test.Veh.Model")
# now that we have a much larger dataset we can do a few visualizations to confirm some prior hypothesis.
ggplot(epa,aes(FuelEcon,Weight))+
geom_point()
filter(epa,   FuelEcon > 9000)
