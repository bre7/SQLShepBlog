binom.test(12, 20, p=0.5)
seg.df <- read.csv("http://goo.gl/qw303p")
chisq.test(table(seg.df$Segment))
table(seg.df$Segment)
# we ask whether the segment sizes are significantly different from one another
chisq.test(table(seg.df$Segment))
# Is subscription status independent from home ownership,
table(seg.df$subscribe, seg.df$ownHome)
chisq.test(table(seg.df$subscribe, seg.df$ownHome))
chisq.test(table(seg.df$subscribe, seg.df$ownHome))
chisq.test(table(seg.df$subscribe, seg.df$ownHome), sim=TRUE, B=10000)
chisq.test(table(seg.df$subscribe, seg.df$ownHome), sim=TRUE, B=10000)
binom.test(120, 200, p=0.5)
sum(dbinom(8:12, 20, 0.5))
dbinom(8:12, 20, 0.5)
library(binom)
install.packages("binom")
library(binom)
binom.confint(12, 20, method="ac")  # same as "agresti-coull"
,
binom.confint(0, 20, method="ac")
hist(seg.df$income)
with(seg.df, hist(income[ownHome=="ownYes"]))
with(seg.df, hist(income[ownHome=="ownNo"]))
histogram(~subscribe | Segment, data=seg.df)
histogram(income ~ ownHome,data=seg.df)
histogram(income | ownHome,data=seg.df)
histogram(~income + ownHome,data=seg.df)
histogram(~income | ownHome,data=seg.df)
t.test(income ∼ ownHome, data=seg.df)
t.test(income ~ ownHome, data=seg.df)
t.test(income ∼ ownHome, data=subset(seg.df, Segment=="Travelers"))
t.test(income ~ ownHome, data=subset(seg.df, Segment=="Travelers"))
get_map(location = c(lon = -95.3632715, lat = 29.7632836), zoom = "auto", scale = "auto", maptype = c("terrain", "terrain-background", "satellite", "roadmap", "hybrid", "toner", "watercolor", "terrain-labels", "terrain-lines", "toner-2010", "toner-2011", "toner-background", "toner-hybrid", "toner-labels", "toner-lines", "toner-lite"), source = c("google", "osm", "stamen", "cloudmade"), force = ifelse(source == "google", TRUE, TRUE), messaging = FALSE, urlonly = FALSE, filename = "ggmapTemp", crop = TRUE, color = c("color", "bw"), language = "en-EN", api_key)
get_map(location = c(lon = -95.3632715, lat = 29.7632836), zoom = "auto", scale = "auto", maptype = c("terrain", "terrain-background", "satellite", "roadmap", "hybrid", "toner", "watercolor", "terrain-labels", "terrain-lines", "toner-2010", "toner-2011", "toner-background", "toner-hybrid", "toner-labels", "toner-lines", "toner-lite"), source = c("google", "osm", "stamen", "cloudmade"), force = ifelse(source == "google", TRUE, TRUE), messaging = FALSE, urlonly = FALSE, filename = "ggmapTemp", crop = TRUE, color = c("color", "bw"), language = "en-EN")
library(ggmap)
install.packages('ggmap')
library(ggmap)
get_map(location = c(lon = -95.3632715, lat = 29.7632836), zoom = "auto", scale = "auto", maptype = c("terrain", "terrain-background", "satellite", "roadmap", "hybrid", "toner", "watercolor", "terrain-labels", "terrain-lines", "toner-2010", "toner-2011", "toner-background", "toner-hybrid", "toner-labels", "toner-lines", "toner-lite"), source = c("google", "osm", "stamen", "cloudmade"), force = ifelse(source == "google", TRUE, TRUE), messaging = FALSE, urlonly = FALSE, filename = "ggmapTemp", crop = TRUE, color = c("color", "bw"), language = "en-EN")
get_map(location = c(lon = -95.3632715, lat = 29.7632836), zoom = "auto", scale = "auto", maptype = c("terrain", "terrain-background", "satellite", "roadmap", "hybrid", "toner", "watercolor", "terrain-labels", "terrain-lines", "toner-2010", "toner-2011", "toner-background", "toner-hybrid", "toner-labels", "toner-lines", "toner-lite"), source = c("google", "osm", "stamen", "cloudmade"), force = ifelse(source == "google", TRUE, TRUE), messaging = FALSE, urlonly = FALSE, filename = "ggmapTemp", crop = TRUE, color = c("color", "bw"), language = "en-EN", api_key)
get_map("Jakarta",zoom=12,maptype="terrain",source="google")
get_map("Jakarta",zoom=12,maptype="terrain")
devtools::install_github("dkahle/ggmap", ref = "tidyup")
library(devtools)
if(!requireNamespace("devtools"))install.packages("devtools")
library(devtools)
devtools::install_github("dkahle/ggmap", ref = "tidyup")
get_map("Jakarta",zoom=12,maptype="terrain",source="google")
library(devtools)
devtools::install_github("dkahle/ggmap", ref = "tidyup")
get_map("Jakarta",zoom=12,maptype="terrain",source="google")
library(ggmap)
get_map("Jakarta",zoom=12,maptype="terrain",source="google")
map <- get_map(location = 'Australia', zoom = 4)
get_map("Jakarta",zoom=12,maptype="terrain",source="google", api_key = 'AIzaSyBr8xVjHWE9fOugNIQyclRe_RUhWOe3gb4')
get_map("Jakarta",zoom=12,maptype="terrain",source="google", api_key = 'AIzaSyBr8xVjHWE9fOugNIQyclRe_RUhWOe3gb4')
get_map("Jakarta",zoom=12,maptype="terrain",source="google", api_key = 'AIzaSyBr8xVjHWE9fOugNIQyclRe_RUhWOe3gb4')
get_map("Jakarta",zoom=12,maptype="terrain",source="google", api_key = 'AIzaSyBr8xVjHWE9fOugNIQyclRe_RUhWOe3gb4')
get_map("Jakarta",zoom=12,maptype="terrain",source="google", api_key = 'AIzaSyBr8xVjHWE9fOugNIQyclRe_RUhWOe3gb4')
get_map("Jakarta",zoom=12,maptype="terrain",source="google", api_key = 'AIzaSyBr8xVjHWE9fOugNIQyclRe_RUhWOe3gb4')
get_map("United States",zoom=12,maptype="terrain",source="google", api_key = 'AIzaSyBr8xVjHWE9fOugNIQyclRe_RUhWOe3gb4')
get_map(zoom=12,maptype="terrain",source="google", api_key = 'AIzaSyBr8xVjHWE9fOugNIQyclRe_RUhWOe3gb4')
get_map(location = 'Australia', zoom = 4)
library(devtools)
install_github("dkahle/ggmap")
get_map(zoom=12,maptype="terrain",source="google", api_key = 'AIzaSyBr8xVjHWE9fOugNIQyclRe_RUhWOe3gb4')
get_map(zoom=12,maptype="terrain",source="google", api_key = 'AIzaSyC5xnXvGL8LXP5icBX-V2vj79XaJ1kH4I8')
ggmap(m)
m <- get_map("Jakarta",zoom=12,maptype="terrain",source="google")
m <- get_map("Jakarta",zoom=12,maptype="terrain",source="google",api_key = 'AIzaSyC5xnXvGL8LXP5icBX-V2vj79XaJ1kH4I8')
ggmap(m)
m <- get_map("Jakarta",zoom=12,maptype="terrain",source="google",api_key = 'AIzaSyC5xnXvGL8LXP5icBX-V2vj79XaJ1kH4I8')
get_map(zoom=12,maptype="terrain",source="google", api_key = 'AIzaSyC5xnXvGL8LXP5icBX-V2vj79XaJ1kH4I8')
m <- get_map("Jakarta",zoom=12,maptype="terrain",source="google",api_key = 'AIzaSyC5xnXvGL8LXP5icBX-V2vj79XaJ1kH4I8')
get_map(zoom=12,maptype="terrain",source="google", api_key = 'AIzaSyC5xnXvGL8LXP5icBX-V2vj79XaJ1kH4I8')
get_map(zoom=12,maptype="terrain",source="osm")
get_map(zoom=12,maptype="terrain",source="osm")
get_map(zoom=12,maptype="terrain",source="osm")
get_map(location = "texas", zoom = 6, source = "stamen")
m <- get_map("Jakarta",zoom=12,maptype="terrain",source="google",api_key = 'AIzaSyC5xnXvGL8LXP5icBX-V2vj79XaJ1kH4I8')
map <- get_map(source = "osm")
map <- get_map(source = "osm")
map <- get_map()
map
str(map)
ggmap(map)
map <- get_map()
m <- get_googlemap("Jakarta",zoom=12,maptype="terrain",source="google",api_key = 'AIzaSyC5xnXvGL8LXP5icBX-V2vj79XaJ1kH4I8')
devtools::install_github("dkahle/ggmap", ref = "tidyup")
map <- get_map(source = "osm")
m <- get_googlemap("Jakarta",zoom=12,maptype="terrain",source="google",api_key = 'AIzaSyC5xnXvGL8LXP5icBX-V2vj79XaJ1kH4I8')
library(ggmap)
m <- get_googlemap("Jakarta",zoom=12,maptype="terrain",source="google",api_key = 'AIzaSyC5xnXvGL8LXP5icBX-V2vj79XaJ1kH4I8')
register_google(key = "AIzaSyC5xnXvGL8LXP5icBX-V2vj79XaJ1kH4I8")
devtools::install_github("dkahle/ggmap")
library(ggmap)
register_google(key = "AIzaSyC5xnXvGL8LXP5icBX-V2vj79XaJ1kH4I8")
remotes::install_github("dkahle/ggmap")
register_google(key = "AIzaSyC5xnXvGL8LXP5icBX-V2vj79XaJ1kH4I8")
remotes::install_github("dkahle/ggmap", force=TRUE)
library(ggmap)
register_google(key = "AIzaSyC5xnXvGL8LXP5icBX-V2vj79XaJ1kH4I8")
m <- get_googlemap("Jakarta",zoom=12,maptype="terrain",source="google",api_key = 'AIzaSyC5xnXvGL8LXP5icBX-V2vj79XaJ1kH4I8')
register_google(key = "AIzaSyC5xnXvGL8LXP5icBX-V2vj79XaJ1kH4I8")
devtools::install_github("dkahle/ggmap")
devtools::install_github("dkahle/ggmap",, force=TRUE)
library(ggmap)
register_google(key = "AIzaSyC5xnXvGL8LXP5icBX-V2vj79XaJ1kH4I8")
register_google(key = "AIzaSyC5xnXvGL8LXP5icBX-V2vj79XaJ1kH4I8")
if(!requireNamespace("devtools")) install.packages("devtools")
devtools::install_github("dkahle/ggmap", ref = "tidyup")
library(ggmap)
register_google(key = "AIzaSyC5xnXvGL8LXP5icBX-V2vj79XaJ1kH4I8")
m <- get_googlemap("Jakarta",zoom=12,maptype="terrain",source="google",api_key = 'AIzaSyC5xnXvGL8LXP5icBX-V2vj79XaJ1kH4I8')
ggmap(m)
m <- get_googlemap("Jakarta",zoom=12,maptype="terrain",source="google",api_key = 'AIzaSyC5xnXvGL8LXP5icBX-V2vj79XaJ1kH4I8')
library(ggmap)
register_google(key = "AIzaSyC5xnXvGL8LXP5icBX-V2vj79XaJ1kH4I8")
m <- get_googlemap("Jakarta",zoom=12,maptype="terrain",source="google",api_key = 'AIzaSyC5xnXvGL8LXP5icBX-V2vj79XaJ1kH4I8')
register_google(key = "AIzaSyC5xnXvGL8LXP5icBX-V2vj79XaJ1kH4I8")
m <- get_googlemap("Jakarta",zoom=12,maptype="terrain",source="google",api_key = 'AIzaSyC5xnXvGL8LXP5icBX-V2vj79XaJ1kH4I8')
ggmap(m)
devtools::session_info()
m <- get_googlemap("Jakarta",zoom=12,maptype="terrain",source="google")
register_google(key = "AIzaSyC5xnXvGL8LXP5icBX-V2vj79XaJ1kH4I8")
m <- get_googlemap("Jakarta",zoom=12,maptype="terrain",source="google")
ggmap(m)
register_google(key = "AIzaSyC5xnXvGL8LXP5icBX-V2vj79XaJ1kH4I8")
m <- get_googlemap(zoom=12,maptype="terrain",source="google")
ggmap(m)
library(dplyr)
starwars
starwars %>%
filter (species == "droid")
starwars %>%
filter (species == "Droid")
starwars %>%
select (name, ends_with("color"))
starwars %>%
mutate(name, bmi = mass / ((height / 100)  ^ 2))
starwars %>%
mutate(name, bmi = mass / ((height / 100)  ^ 2)) %>%
select(name:mass, bmi)
starwars %>%
arrange(desc(mass))
starwars %>%
group_by(species)
starwars %>%
group_by(species) %>%
summarise(
n=n(),
mass=mean(mass, na.rm=TRUE)
) %>%
filter(n>1)
library(nycflights13)
library(tidyverse)
install.packages("tidyverse")
install.packages("nycflights13")
library(nycflights13)
library(tidyverse)
flights
filter(flights, month==1, day==1)
install.packages("nycflights13")
install.packages("nycflights13")
plot (filter(flights, month==1, day==1))
filter(flights, month==1, day==1)
plot (dep_delay, carrier, filter(flights, month==1, day==1))
plot (arr_delay, carrier, filter(flights, month==1, day==1))
filter(flights, month==1, day==1)
plot (arr_delay, carrier, flights)
first<-filter(flights, month==1, day==1)
plot (first$arr_delay, first$carrier )
barplot(first$arr_delay, first$carrier )
table(first$carrier )
jan1 <-filter(flights, month==1, day==1)
jan1
filter(flights, month =1 )
filter(flights, month ==1 )
filter(flights, month ==11 | month ==12)
nov_dec <- filter(flights, month %in% c(11,12))
View(nov_dec)
View(nov_dec)
filter(flights, arr_delay > 120)
filter(flights, arr_delay > 120 | dep_delay > 120)
filter(flights, !(arr_delay > 120 | dep_delay > 120))
filter(flights, arr_delay > 120 )
filter(flights, dest %in% c("HOU", "IAH")  )
View(jan1)
View(jan1)
filter(flights, carrier %in% c("UA", "AA", "DL"))
filter(flights, (arr_delay > 120) & dep_delay <1)
filter(flights, ((arr_time - sched_arr_time)< 30) & dep_delay > 60)
filter(flights, (dep_time >= 0000 |  dep_time > 600)
filter(flights, (dep_time >= 0000 |  dep_time > 600))
filter(flights, (dep_time >= 0000 |  dep_time > 600))
filter(flights, (dep_time >= 0000 |  dep_time <= 600))
x<-filter(flights, (dep_time >= 0000 |  dep_time <= 600))
View(x)
View(x)
x<-filter(flights, (dep_time >= 0000 &  dep_time <= 600))
View(x)
View(x)
x<-filter(flights, between(dep_time,0000 ,600))
arrange(x, year, month, day)
x<-arrange(x, year, month, day)
View(x)
View(x)
x<-arrange(x, year, desc(month), day)
View(x)
View(x)
arrange(flights,desc(year))
arrange(flights,asc(year))
arrange(flights)
arrange(is.na(flights))
arrange(flights,is.na(flights))
arrange(flights,is.na(year))
arrange(flights,!is.na(year))
arrange(flights,!is.na(carrier))
arrange(flights,is.na(carrier))
summary(flights)
arrange(flights,is.na(arr_time))
arrange(flights,!is.na(arr_time))
arrange(flights,desc(dep_delay))
arrange(flights,desc(arr_delay))
arrange(flights,(arr_delay))
select(flights, year, month, day)
select(flights, year: day)
select(flights, (year, month, day))
select(flights, -(year, month, day))
select(flights, -(year:day))
select(flights, - c(year, month, day))
?select
select(flights, starts_with("arr"))
select(flights, starts_with("time"))
select(flights, starts_with("arr"))
select(flights, contains("arr"))
select(flights, ends_with("arr"))
select(flights, ends_with("time"))
select(flights, time_hour, air_time, everything())
select(carrier, flights, time_hour, air_time, everything())
select(carrier, flights, time_hour, air_time, everything())
select(carrier, flights, air_time, everything())
select(flights, carrier, air_time, everything())
select(flights, carrier, carrier,air_time, everything())
select(flights, carrier, carrier, air_time)
select(flights, carrier, carrier)
vars <- c("year", "month", "day", "dep_delay", "arr_delay")
select(flights, vars)
select(flights, one_of(vars))
vars <- c("year", "month", "day", "dep_delay", "arr_delay", "george")
select(flights, one_of(vars))
select(flights, contains("TIME"))
flights_sml <-select(flights,
year:day,
ends_with("delay"),
distance,
air_time,
)
View(flights_sml)
View(flights_sml)
mutate(flights_sml,
gain=dep_delay-arr_delay,
speed = distance /air_time *60)
View(flights_sml)
mutate(flights_sml,
gain=dep_delay-arr_delay,
speed = distance /air_time *60)
flights_sml <-select(flights,
year:day,
ends_with("delay"),
distance,
air_time,
)
mutate(flights_sml,
gain=dep_delay-arr_delay,
speed = distance /air_time *60)
mutate(flights_sml,
gain = dep_delay - arr_delay,
hours = air_time / 60
gain_per_hour gain/hours)
mutate(flights_sml,
gain = dep_delay - arr_delay,
hours = air_time / 60,
gain_per_hour gain  /hours)
mutate(flights_sml,
gain = dep_delay - arr_delay,
hours = air_time / 60,
gain_per_hour = gain  /hours)
x <- mutate(flights_sml,
gain=dep_delay-arr_delay,
speed = distance / air_time *60)
select(x, desc(speed))
View(x)
arrange(x, desc(speed))
x<-arrange(x, desc(speed))
View(x)
View(x)
mutate(flights_sml,
gain = dep_delay - arr_delay,
hours = air_time / 60,
gain_per_hour = gain  /hours)
transmutate(flights_sml,
gain = dep_delay - arr_delay,
hours = air_time / 60,
gain_per_hour = gain  /hours)
transmute(flights_sml,
gain = dep_delay - arr_delay,
hours = air_time / 60,
gain_per_hour = gain  /hours)
mutate(flights_sml,
gain = dep_delay - arr_delay,
hours = air_time / 60,
gain_per_hour = gain  /hours)
group_by(flights, year, month, day)
summarise(by_day, delay=mean(dep_delay, na.rm=TRUE))
by_day <_group_by(flights, year, month, day)
summarise(by_day, delay=mean(dep_delay, na.rm=TRUE))
by_day <- group_by(flights, year, month, day)
summarise(by_day, delay=mean(dep_delay, na.rm=TRUE))
delay <- summarise(by_dest,
count=n(),
dist=mean(distance, na.rm = TRUE),
delay = mean (arr_delay, na.rm =TRUE))
by_dest <- group_by(flights, dest)
delay <- summarise(by_dest,
count=n(),
dist=mean(distance, na.rm = TRUE),
delay = mean (arr_delay, na.rm =TRUE))
View(delay)
View(delay)
delay <- filter(delay, count > 20, dest != "HNL")
View(delay)
View(delay)
ggplot(data=delay, aes(dist, delay))+
geom_point(aes(size=count), alpha=1/3) +
geom_smoth(se=FALSE)
ggplot(data=delay, aes(dist, delay))+
geom_point(aes(size=count), alpha=1/3) +
geom_smooth(se=FALSE)
ggplot(data=delay, aes(dist, delay))+
geom_point(aes(size=count), alpha=1/3) +
geom_smooth(se=TRUE)
ggplot(data=delay, aes(dist, delay))+
geom_point(aes(size=count), alpha=1/3) +
geom_smooth(se=FALSE)
View(by_dest)
View(by_dest)
by_dest <- group_by(flights, dest)
View(by_dest)
count=n(),
dist=mean(distance, na.rm = TRUE),
delay = mean(arr_delay, na.rm =TRUE))  %>%
filter(count > 20, dest!= "HNL")
delays <- flights %>%
group_by(dest) %>%
summarise(
count=n(),
dist=mean(distance, na.rm = TRUE),
delay = mean(arr_delay, na.rm =TRUE))  %>%
filter(count > 20, dest!= "HNL")
View(delays)
View(by_dest)
View(by_dest)
arrs <- flights  %>%
group_by(orgin)  %>%
summarise(
count=n(),
delay=mean(dep_delay, na.rm=TRUE)
)
arrs <- flights  %>%
group_by(origin)  %>%
summarise(
count=n(),
delay=mean(dep_delay, na.rm=TRUE)
)
View(arrs)
View(arrs)
View(arrs)
arrs <- flights  %>%
group_by(origin,month)  %>%
summarise(
count=n(),
delay=mean(dep_delay, na.rm=TRUE)
)
View(arrs)
View(arrs)
arrs <- flights  %>%
group_by(origin,year,month)  %>%
summarise(
count=n(),
delay=mean(dep_delay, na.rm=TRUE)
)
arrs <- flights  %>%
group_by(origin,month)  %>%
summarise(
count=n(),
delay=mean(dep_delay, na.rm=TRUE)
)
View(arrs)
View(arrs)
readPath <- rxGetOption("sampleDataDir")
library(scaleR)
?rxImport
data(father.son)
version
version
version
?version
??version
install.packages("choroplethr")
library(choroplethr)
help(package="choroplethr")
data(package="choroplethr")
data("df_pop_county")
View(df_pop_county)
View(df_pop_county)
?df_pop_county
View(df_pop_county)
View(df_pop_county)
View(df_pop_county)
?str()
str(df_pop_county)
View(df_pop_county)
View(df_pop_county)
summary(df_pop_county)
?county_choropleth
county_choropleth(df_pop_county)
install.packages("choroplethrMaps")
library(choroplethrMaps)
county_choropleth(df_pop_county)
county_choropleth(df_pop_county,
title="Population Density",
legend="Population")
county_choropleth(df_pop_county,
title="Population Density",
legend="Population",
state_zoom = "texas")
county_choropleth(df_pop_county,
title="Population Density",
legend="Population",
num_colors = 9,
state_zoom = "texas")
?county_choropleth
?state.regions
state.regions
data(state.regions)
View(state.regions)
View(state.regions)
View(df_pop_county)
View(df_pop_county)
county_choropleth(df_pop_county,
title="Population Density",
legend="Population",
num_colors = 9,
state_zoom = "texas")
library(dplyr)
library(ggplot2)
library(GGally)
setwd("/Users/Shep/git/SQLShepBlog/data")
epa <- read.csv("18tstcar.csv",stringsAsFactors=FALSE)
names(epa)[12] <-paste("Cylinders")
names(epa)[46] <-paste("FuelEcon")
colnames(epa)[colnames(epa)=="X..of.Gears"] <- "Gears"
colnames(epa)[colnames(epa)=="Axle.Ratio"] <- "AxleRatio"
epa <- dplyr::rename(epa, HorsePower = "Rated.Horsepower")
epa <- dplyr::rename(epa, Weight = "Equivalent.Test.Weight..lbs..")
epa <- dplyr::rename(epa, Model = "Represented.Test.Veh.Model")
# now that we have a much larger dataset we can do a few visualizations to confirm some prior hypothesis.
ggplot(epa,aes(FuelEcon,Weight))+
geom_point()
# in case you are wondering, this is where the shit show begins
# We have weight and mpg and a car that claims to get 10,000 mpg
# In a real Data Science job this is where you will spend 80% of your life
# My best advice is to treat it like a game.
# Now you ahve to determine what vehicle gets 10,000mpg and is it cool enough for you to buy?
# No, i mean should you remove the row, fix the value or leave it?
# All are valid possible actions and one will be the answer.
# according to https://www.fueleconomy.gov/feg/noframes/39181.shtml the mpg shoud be
# 30 combined, so we will fix by script.  But, much like SQL be careful..
# the following will produce three rows for the Chevy Sonic, we will delete the one with 10,000 mpg
filter(epa,   FuelEcon > 9000)
epa[epa$Test.Vehicle.ID == "184HV863DA" ,]
epa[epa$Test.Vehicle.ID == "184HV863DA" ,c("Represented.Test.Veh.Make","Model","Test.Vehicle.ID","FuelEcon")]
epa <- (filter(epa, FuelEcon < 9999))
summary(epa$FuelEcon)
NROW(epa)
ggplot(epa,aes(FuelEcon,Weight))+
geom_point()
epa <- (distinct(epa,Vehicle.Manufacturer.Name
,Veh.Mfr.Code
,Represented.Test.Veh.Make
,Model
,Test.Vehicle.ID
,Test.Veh.Displacement..L.
,Drive.System.Description
,AxelRatio
,Weight
,Test.Fuel.Type.Cd
, .keep_all = TRUE) )
# trim down the columns for the mdel training set
View(epa[c(4,5,10,11,12,14,15,16,18,22,23,34,35,36,37,46)])
epaMpg <- epa[c(4,5,10,11,12,14,15,16,18,22,23,34,35,36,37,46)]
names(epaMpg)
epaMpg$Cylinders <- as.factor(epaMpg$Cylinders)
epaMpg$Tested.Transmission.Type.Code <- as.factor(epaMpg$Tested.Transmission.Type.Code)
epaMpg$Gears <- as.factor(epaMpg$Gears)
epaMpg$Test.Procedure.Cd <- as.factor(epaMpg$Test.Procedure.Cd)
epaMpg$Drive.System.Code <- as.factor(epaMpg$Drive.System.Code)
epaMpg$Test.Fuel.Type.Cd <- as.factor(epaMpg$Test.Fuel.Type.Cd)
epaMpg.1 <- lm(FuelEcon ~ HorsePower + Cylinders + Tested.Transmission.Type.Code + Gears + Drive.System.Code + Weight + AxleRatio + Test.Procedure.Cd + Test.Fuel.Type.Cd,data=epaMpg)
epaMpg.1 <- lm(FuelEcon ~ HorsePower + Cylinders + Tested.Transmission.Type.Code + Gears + Drive.System.Code + Weight + AxleRatio + Test.Procedure.Cd + Test.Fuel.Type.Cd,data=epaMpg)
summary(epaMpg.1)
